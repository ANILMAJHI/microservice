package com.anil.spring.boot.api.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.anil.spring.boot.api.exception.NotFoundException;
import com.anil.spring.boot.api.model.Department;
import com.anil.spring.boot.api.service.DepartmentServiceImpl;

@RestController
@RequestMapping("/api")
public class DepartmentController {

	@Autowired
	DepartmentServiceImpl service;

	@GetMapping("/test")
	public String MessageResponse() {
		return "Return the message...";
	}

	@PostMapping("/saveDept")
	public ResponseEntity<Department> saveDepartment(@RequestBody Department department) {
		// List<Department> dept=service.saveDepartment(department);

		return new ResponseEntity<Department>(service.saveDepartment(department), HttpStatus.OK);
	}

	@GetMapping("/allUsers")
	public ResponseEntity<List<Department>> findById() {

		List<Department> list = service.findAll();

		// return new ResponseEntity<List<Department>>(list, HttpStatus.OK);
		return ResponseEntity.ok().body(list);
	}

	@GetMapping("/deptId/{id}")
	public ResponseEntity<Department> getByIdq(@PathVariable("id") int id) throws NotFoundException {

		Department department = service.getById(id).orElse(null);
		if (department != null) {
			return new ResponseEntity<Department>(department, HttpStatus.OK);
		}

		return new ResponseEntity(new NotFoundException(id + " Id is not available in DB, Please check other ID"),
				HttpStatus.NO_CONTENT);
		
	}
	
	public String deleteById(@PathVariable("id") int id)
	{
		 return  service.deleteDepartment();
	}
	
	
		// return ResponseEntity.ok().body(department);

		/*
		 * @GetMapping("/students/subjects") public ResponseEntity<List<Department>>
		 * getDepartmentsByStudentSubject(
		 * 
		 * @RequestParam("subjects") String[] subjects) {
		 * 
		 * List<Department> subList = service.getDepartmentsByStudentSubject(subjects);
		 * return ResponseEntity.ok().body(subList); }
		 */

	//}
	
	
}
