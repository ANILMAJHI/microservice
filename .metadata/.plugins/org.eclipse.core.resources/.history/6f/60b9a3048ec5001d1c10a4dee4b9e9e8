package com.anil.spring.boot.api.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.anil.spring.boot.api.exception.ErrorResponse;
import com.anil.spring.boot.api.exception.NotFoundException;
import com.anil.spring.boot.api.model.Department;
import com.anil.spring.boot.api.service.DepartmentServiceImpl;

@RestController
@RequestMapping("/api")
public class DepartmentController {

	@Autowired
	DepartmentServiceImpl service;

	@GetMapping("/test")
	public String MessageResponse() {
		return "Return the message...";
	}

	@PostMapping("/saveDept")
	public ResponseEntity<Department> saveDepartment(@RequestBody Department department) {

		return new ResponseEntity<Department>(service.saveDepartment(department), HttpStatus.OK);
	}

	@GetMapping("/allUsers")
	public ResponseEntity<List<Department>> findById() {

		List<Department> list = service.findAll();

		// return new ResponseEntity<List<Department>>(list, HttpStatus.OK);
		return ResponseEntity.ok().body(list);
	}

	@GetMapping("/deptId/{id}")
	public ResponseEntity<Department> getByIdq(@PathVariable("id") int id) throws NotFoundException {

		Optional<Department> optionalDepartment = service.getById(id);
		if (optionalDepartment.isPresent()) {
			Department department = optionalDepartment.get();
			return new ResponseEntity<Department>(department, HttpStatus.OK);
		} else {
			ErrorResponse errorResponse = new ErrorResponse(HttpStatus.NOT_FOUND.value(),
					+id + ": Department Id  does not exist in the database, PLEASE CHECK OTHER Department ID.");
			return new ResponseEntity(errorResponse, HttpStatus.NOT_FOUND);
		}

	}

	@DeleteMapping("/delete/{id}")
	public ResponseEntity<Department> deleteById(@PathVariable("id") Integer id) {
		//Optional<Department> optionalDepartment = service.deleteById(id);

		if(id==null) {
			return new ResponseEntity(id+"Id  does not exist in the database, PLEASE CHECK OTHER Department ID", HttpStatus.NOT_FOUND);
			
		}
		service.deleteDepartment(id);

		return new ResponseEntity(id+"Id  Deleted Successfully...", HttpStatus.OK);
		
		
		
		/*
		 * if (optionalDepartment.isPresent()) { Department department =
		 * optionalDepartment.get(); return new ResponseEntity<Department>(department,
		 * HttpStatus.OK); } else { ErrorResponse errorResponse = new
		 * ErrorResponse(HttpStatus.NOT_FOUND.value(), +id +
		 * ": Department Id  does not exist in the database, PLEASE CHECK OTHER Department ID."
		 * ); return new ResponseEntity(errorResponse, HttpStatus.NOT_FOUND);
		 */
		//}

	}

	/*
	 * @GetMapping("/students/subjects") public ResponseEntity<List<Department>>
	 * getDepartmentsByStudentSubject(
	 * 
	 * @RequestParam("subjects") String[] subjects) {
	 * 
	 * List<Department> subList = service.getDepartmentsByStudentSubject(subjects);
	 * return ResponseEntity.ok().body(subList); }
	 */

	// }
	@ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<?> handleValidationException(MethodArgumentNotValidException ex) {
        BindingResult result = ex.getBindingResult();
        List<String> errorMessages = new ArrayList<>();
        for (FieldError error : result.getFieldErrors()) {
            errorMessages.add(error.getField() + ": " + error.getDefaultMessage());
        }
        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorMessages);
    }
}


